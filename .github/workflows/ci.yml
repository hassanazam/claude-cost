name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    
    - name: Test package installation
      run: |
        pip install -e .
    
    - name: Test imports
      run: |
        python -c "import claude_cost; print('✅ Package imports successfully')"
        python -c "from claude_cost import find_project_files, calculate_comprehensive_metrics; print('✅ Core functions import')"
        python -c "from claude_cost import AdvancedPredictionEngine, SessionContext; print('✅ Advanced features import')"
    
    - name: Test CLI commands
      run: |
        claude-cost --help
        echo "✅ CLI help works"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Verify package contents
      run: |
        pip install twine
        twine check dist/*

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*