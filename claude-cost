#!/usr/bin/env python3
"""
Claude Cost Analyzer - CLI tool for comprehensive metrics and predictions
"""

import os
import sys
import argparse
import subprocess


def main():
    parser = argparse.ArgumentParser(
        description='Claude Cost Analyzer - Analyze your Claude usage and costs',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  claude-cost metrics         # Essential optimization metrics
  claude-cost predict         # Usage limit predictions with backtesting
        """
    )
    
    parser.add_argument('command', nargs='?', default='metrics',
                       choices=['metrics', 'predict'],
                       help='What to analyze (default: metrics)')
    
    args = parser.parse_args()
    
    # Handle commands
    if args.command == 'metrics':
        try:
            result = subprocess.run([sys.executable, 'claude_comprehensive_metrics.py', 'metrics'], cwd=os.path.dirname(os.path.abspath(__file__)))
            sys.exit(result.returncode)
        except Exception as e:
            print(f"❌ Error generating comprehensive metrics: {e}")
            sys.exit(1)
    
    elif args.command == 'predict':
        try:
            result = subprocess.run([sys.executable, 'claude_comprehensive_metrics.py', 'predict'], cwd=os.path.dirname(os.path.abspath(__file__)))
            sys.exit(result.returncode)
        except Exception as e:
            print(f"❌ Error generating predictions: {e}")
            sys.exit(1)

if __name__ == '__main__':
    main()